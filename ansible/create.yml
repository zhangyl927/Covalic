---
- name: Create basic AWS instances for COVALIC
  hosts: local
  connection: local
  gather_facts: false
  vars:
    - region: us-east-1
    - pub_key_name: "covalic_admin"
    - ami: ami-76e27e1e
    - mq_port: 5672
    - mongo_port: 27017
    - ec2_webserver_instance_type: t2.medium
    - ec2_celeryworker_instance_type: t2.medium
    - ec2_mongodb_instance_type: m3.medium
    - ec2_mq_instance_type: t2.small

  tasks:

    - name: User message
      fail: msg="You did not define a pod name to manage all resources. Example definition | -e 'pod=dev'"
      when: pod is not defined

    - name: Create an AWS security group for the webserver instances
      ec2_group:
        name: "webserver_{{ pod }}"
        description: security group for covalic webserver machines
        region: "{{ region }}"
        rules:
            # SSH from KHQ
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 66.194.253.20/32
            # SSH from KRS
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 97.65.130.169/32
            # SSH from KSW
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 23.31.117.189/32
            # HTTP from everywhere
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            # HTTPS from everywhere
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
        rules_egress:
            # egress to everywhere
            - proto: all
              from_port: all
              to_port: all
              cidr_ip: 0.0.0.0/0


    - name: Create an AWS security group for the internal instances
      ec2_group:
        name: "backend_{{ pod }}"
        description: security group for covalic backend machines
        region: "{{ region }}"
        rules:
            # Ping from webserver
            - proto: icmp
              from_port: -1
              to_port: -1
              group_name: "webserver_{{ pod }}"
            # SSH from KHQ
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 66.194.253.20/32
            # SSH from KRS
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 97.65.130.169/32
            # SSH from KSW
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 23.31.117.189/32
            # mq connections from webserver security group
            - proto: tcp
              from_port: "{{ mq_port }}"
              to_port: "{{ mq_port }}"
              group_name: "webserver_{{ pod }}"
            # mongo connections from webserver security group
            - proto: tcp
              from_port: "{{ mongo_port }}"
              to_port: "{{ mongo_port }}"
              group_name: "webserver_{{ pod }}"
        rules_egress:
            # egress to everywhere
            - proto: all
              from_port: all
              to_port: all
              cidr_ip: 0.0.0.0/0

    - local_action:
        module: ec2
        key_name: "{{ pub_key_name }}"
        instance_type: "{{ ec2_webserver_instance_type }}"
        image: "{{ ami }}"
        wait: yes
        group: "webserver_{{ pod }}"
        region: "{{ region }}"
        exact_count: 1
        count_tag:
           Name: covalic-girder-{{pod}}
        id: covalic-girder-{{pod}}
        instance_tags:
           Name: covalic-girder-{{pod}}
           type: girder
           pod: "{{ pod }}"
      register: girder_webserver

    - name: associate new elastic IP with girder webserver for non-production
      ec2_eip: "instance_id={{ girder_webserver.tagged_instances[0].id }} region={{ region }}"
      register: eip
      when: pod != 'prod'

    - name: associate DNS mapped elastic IP with girder prod webserver
      ec2_eip: "instance_id={{ girder_webserver.tagged_instances[0].id }} region={{ region }} ip=54.208.189.152"
      register: eip
      when: pod == 'prod'

    - name: Create the celery worker
      ec2:
        key_name: "{{ pub_key_name }}"
        instance_type: "{{ ec2_celeryworker_instance_type }}"
        image: "{{ ami }}"
        region: "{{ region }}"
        wait: yes
        group: "backend_{{ pod }}"
        instance_tags:
           Name: "{{ pod }} celery worker"
           type: celery
           pod: "{{ pod }}"
      register: celery_server

    - name: Create the mongodb instance
      ec2:
        key_name: "{{ pub_key_name }}"
        instance_type: "{{ ec2_mongodb_instance_type }}"
        image: "{{ ami }}"
        region: "{{ region }}"
        wait: yes
        group: "backend_{{ pod }}"
        instance_tags:
          Name: "{{ pod }} mongodb"
          type: mongodb
          pod: "{{ pod }}"
      register: mongodb_server

    - name: Create the mq instance
      ec2:
        key_name: "{{ pub_key_name }}"
        instance_type: "{{ ec2_mq_instance_type }}"
        image: "{{ ami }}"
        region: "{{ region }}"
        wait: yes
        group: "backend_{{ pod }}"
        instance_tags:
          Name: "{{ pod }} mq"
          type: mq
          pod: "{{ pod }}"
      register: mq_server
